{"version":3,"sources":["modules/foursquare.js","components/Venue/Venue.js","components/VenuesCollection/VenuesCollection.js","components/Error/Error.js","containers/MainPage/MainPage.js","containers/App.js","constants/routes.js","serviceWorker.js","index.js"],"names":["FoursquareVenues","Object","classCallCheck","this","BASE_URL","CLIENT_ID","process","CLIENT_SECRET","defaultRange","limit","userLocation","window","sessionStorage","getItem","_this","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","location","concat","coords","latitude","longitude","setItem","error","radius","query","_this2","getUserLocation","then","parseInt","debounce","axios","get","_apiVersion","result","data","response","catch","message","date","Date","year","getFullYear","month","getMonth","day","getDate","String","Venue","_ref","react_default","a","createElement","Card","onClick","open","encodeURI","name","formattedAddress","openVenueMap","CardHeader","style","backgroundImage","categories","icon","prefix","suffix","categoryIcon","cardHeaderStyles","CardBody","CardTitle","CardText","address","Button","color","distance","Badge","VenuesCollection","venues","CardColumns","map","venue","components_Venue_Venue","key","id","Error","Alert","MainPage","props","possibleConstructorReturn","getPrototypeOf","call","foursquare","state","noResults","showingResults","total","getVenues","setState","length","values","event","target","blur","value","components_VenuesCollection_VenuesCollection","className","_this3","_this$state","components_Error_Error","Form","onSubmit","preventDefault","FormGroup","Input","type","placeholder","onChange","onKeyUp","bind","min","max","e","onMouseUp","renderVenues","Component","App","BrowserRouter","basename","Switch","Route","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","containers_App","document","getElementById","URL","href","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4062d4e1.chunk.js","sourcesContent":["import axios from 'axios'\nimport debounce from 'debounce-promise'\nexport default class FoursquareVenues {\n  constructor() {\n    this.BASE_URL = 'https://api.foursquare.com/v2/venues/search'\n    this.CLIENT_ID = process.env.REACT_APP_CLIENT_ID\n    this.CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET\n    this.defaultRange = 250\n    this.limit = 50\n    this.userLocation = window.sessionStorage\n      ? window.sessionStorage.getItem('userLocation')\n      : null\n  }\n  getUserLocation() {\n    return new Promise((resolve, reject) => {\n      if (this.userLocation) {\n        resolve(this.userLocation)\n      }\n      const onGeoSuccess = location => {\n        this.userLocation = `${location.coords.latitude},${\n          location.coords.longitude\n        }`\n        window.sessionStorage.setItem('userLocation', this.userLocation)\n        resolve(this.userLocation)\n      }\n      const onGeoError = error => {\n        reject(error)\n      }\n      navigator.geolocation.getCurrentPosition(onGeoSuccess, onGeoError)\n    })\n  }\n\n  getVenues(radius, query) {\n    return new Promise((resolve, reject) => {\n      this.getUserLocation().then(() => {\n        radius = parseInt(radius, 10) || this.defaultRange\n        debounce(\n          axios\n            .get(\n              `${this.BASE_URL}?client_id=${this.CLIENT_ID}&client_secret=${\n                this.CLIENT_SECRET\n              }&ll=${this.userLocation}&radius=${radius}&query=${query}&limit=${\n                this.limit\n              }&v=${this._apiVersion()}`\n            )\n            .then(result => {\n              resolve(result.data.response)\n            })\n            .catch(error => {\n              reject(error.message)\n            }),\n          300\n        )\n      })\n    })\n  }\n\n  _apiVersion() {\n    let date = new Date()\n    let year = date.getFullYear()\n    let month = date.getMonth() + 1\n    let day = date.getDate()\n\n    return String(10000 * year + 100 * month + day)\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Venue.css'\nimport {\n  Badge,\n  Button,\n  Card,\n  CardText,\n  CardBody,\n  CardTitle,\n  CardHeader\n} from 'reactstrap'\n\nconst openVenueMap = data => {\n  return () =>\n    window.open(\n      `https://www.google.com/maps/search/?api=1&query=${encodeURI(\n        data.name\n      )}%20${encodeURI(data.location.formattedAddress[0])}`\n    )\n}\n\nconst categoryIcon = data => {\n  if (data.categories[0] && data.categories[0].icon) {\n    return `${data.categories[0].icon.prefix}64${\n      data.categories[0].icon.suffix\n    }`\n  }\n}\n\nconst cardHeaderStyles = data => {\n  return {\n    backgroundImage: `url(${categoryIcon(data)})`\n  }\n}\nconst Venue = ({ data }) => {\n  return (\n    <Card onClick={openVenueMap(data)}>\n      <CardHeader style={cardHeaderStyles(data)}>\n        {data.categories[0] && data.categories[0].name}\n      </CardHeader>\n      <CardBody>\n        <CardTitle>{data.name}</CardTitle>\n        <CardText>{data.location.address}</CardText>\n        <CardText>\n          <Button color=\"link\">\n            {data.location.distance} <Badge color=\"secondary\">meter</Badge>\n          </Button>\n        </CardText>\n      </CardBody>\n    </Card>\n  )\n}\n\nVenue.propTypes = {\n  data: PropTypes.object.isRequired\n}\n\nexport default Venue\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Venue from '../Venue'\nimport { CardColumns } from 'reactstrap'\n\nimport './VenuesCollection.css'\n\nconst VenuesCollection = ({ venues }) => {\n  return (\n    <CardColumns>\n      {venues.map(venue => {\n        return <Venue data={venue} key={venue.id} />\n      })}\n    </CardColumns>\n  )\n}\n\nVenuesCollection.propTypes = {\n  venues: PropTypes.array.isRequired\n}\nexport default VenuesCollection\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Alert } from 'reactstrap'\n\nconst Error = ({ error }) => {\n  return <Alert color=\"danger\">{error} ... please try again )</Alert>\n}\n\nError.propTypes = {\n  error: PropTypes.object.isRequired\n}\nexport default Error\n","import React, { Component } from 'react'\nimport FoursquareVenues from '../../modules/foursquare'\nimport { Alert, Form, FormGroup, Input } from 'reactstrap'\nimport './MainPage.css'\n\nimport VenuesCollection from '../../components/VenuesCollection'\nimport Error from '../../components/Error'\n\nclass MainPage extends Component {\n  constructor(props) {\n    super(props)\n    this.foursquare = new FoursquareVenues()\n    this.state = {\n      query: '',\n      venues: [],\n      noResults: false,\n      radius: 2000,\n      showingResults: 0,\n      total: 0,\n      error: ''\n    }\n  }\n\n  componentDidMount() {\n    this.getVenues()\n  }\n\n  getVenues() {\n    this.foursquare\n      .getVenues(this.state.radius, this.state.query)\n      .then(venues => {\n        this.setState({ noResults: !venues.length })\n        this.setState({\n          showingResults: venues.length,\n          total: venues.length,\n          venues: Object.values(venues)[0]\n        })\n      })\n      .catch(error => {\n        this.setState({ error: error })\n      })\n  }\n\n  onKeyUp(event) {\n    if (event.key === 'Enter') {\n      event.target.blur()\n    }\n    this.setState({ query: event.target.value })\n    this.getVenues()\n  }\n\n  renderVenues() {\n    if (this.state.venues.length) {\n      return <VenuesCollection venues={this.state.venues} />\n    } else if (this.state.noResults) {\n      return <Alert color=\"primary\">No venues found nearby you.</Alert>\n    } else {\n      return (\n        // TODO add loader animation\n        <div>\n          <div className=\"loader\" />\n          <div className=\"dot\" />\n        </div>\n      )\n    }\n  }\n\n  render() {\n    const { query, total, radius, error } = this.state\n    return (\n      <div>\n        <div className=\"container\">\n          {error && <Error error={error} />}\n\n          <div className=\"text-center\">\n            <h1 className=\"display-4\">Venues NearBy</h1>\n            <p className=\"lead mb-4\">Find venues near you</p>\n            <Form className=\"mb-5\" onSubmit={event => event.preventDefault()}>\n              <FormGroup>\n                <Input\n                  type=\"text\"\n                  id=\"query\"\n                  placeholder=\"ex: food, ,bar , gym ...\"\n                  onChange={this.onKeyUp.bind(this)}\n                  value={query}\n                />\n              </FormGroup>\n              <FormGroup>\n                <p className=\"range-field\">\n                  <input\n                    className=\"custom-range\"\n                    type=\"range\"\n                    id=\"slider\"\n                    min=\"1\"\n                    max=\"5000\"\n                    value={radius}\n                    onChange={e => this.setState({ radius: e.target.value })}\n                    onMouseUp={e => this.getVenues()}\n                  />\n                </p>\n              </FormGroup>\n              <p>\n                Showing <strong>{this.state.showingResults}</strong> of {total}{' '}\n                venues found{' '}\n                {query ? (\n                  <span>\n                    {' '}\n                    for <strong>{query}</strong>{' '}\n                  </span>\n                ) : null}{' '}\n                within <strong>{radius / 1000}</strong> KM.\n              </p>\n            </Form>\n          </div>\n          {this.renderVenues()}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default MainPage\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport * as routes from '../constants/routes'\n\nimport MainPage from './MainPage'\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <Route exact path={routes.MAIN} component={MainPage} />\n    </Switch>\n  </Router>\n)\n\nexport default App\n","export const MAIN = '/'\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}